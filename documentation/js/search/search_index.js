var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.329,1,1.858]],["body/controllers/AppController.html",[0,2.077,1,2.905,2,1.645,3,0.485,4,0.418,5,0.418,6,3.055,7,0.557,8,1.531,9,4.442,10,2.3,11,0.039,12,0.89,13,3.711,14,1.213,15,1.384,16,0.799,17,2.531,18,3.055,19,0.632,20,0.485,21,0.234,22,1.828,23,1.341,24,1.213,25,3.711,26,0.03,27,0.03]],["title/modules/AppModule.html",[28,1.477,29,1.858]],["body/modules/AppModule.html",[1,2.801,2,1.749,3,0.374,4,0.322,5,0.322,11,0.039,16,0.954,17,2.603,18,2.355,19,0.487,20,0.374,21,0.18,26,0.026,27,0.026,28,1.944,29,3.512,30,1.41,31,1.944,32,2.355,33,2.355,34,2.355,35,2.908,36,2.603,37,2.446,38,1.774,39,1.774,40,2.861,41,2.789,42,2.789,43,2.861,44,2.861,45,2.355,46,2.789,47,2.355,48,2.861,49,2.355,50,2.861,51,2.355,52,1.575,53,1.268,54,2.861,55,2.861,56,2.861,57,2.861,58,2.861,59,2.861,60,2.355]],["title/injectables/AppService.html",[17,1.477,61,0.338]],["body/injectables/AppService.html",[3,0.497,4,0.428,5,0.428,7,0.57,8,1.554,9,4.48,11,0.038,12,0.911,14,1.241,15,1.404,16,0.647,17,2.343,19,0.647,20,0.497,21,0.24,24,1.241,26,0.031,27,0.031,60,3.128,61,0.536,62,1.241,63,3.128,64,3.799,65,3.799,66,3.128,67,3.128,68,3.799,69,3.128,70,3.799,71,3.799]],["title/controllers/AuthController.html",[0,1.329,72,1.858]],["body/controllers/AuthController.html",[0,1.355,2,1.355,3,0.4,4,0.344,5,0.344,7,0.459,8,1.349,10,2.56,11,0.039,12,0.99,14,1.349,16,0.797,19,0.521,20,0.4,21,0.193,22,1.507,23,1.105,24,0.999,26,0.027,27,0.027,72,2.56,73,2.517,74,2.517,75,3.058,76,2.155,77,3.4,78,3.4,79,3.058,80,3.058,81,3.058,82,1.651,83,1.492,84,1.492,85,4.122,86,1.507,87,3.058,88,4.13,89,3.058,90,2.517,91,2.517,92,2.517,93,2.072,94,2.161,95,1.896,96,3.058,97,3.058,98,3.058,99,3.058,100,3.058,101,3.058,102,3.058,103,1.355,104,3.058]],["title/modules/AuthModule.html",[28,1.477,35,1.65]],["body/modules/AuthModule.html",[2,1.628,3,0.338,4,0.291,5,0.291,11,0.039,16,0.945,19,0.44,20,0.338,21,0.163,26,0.024,27,0.024,28,1.81,30,1.273,31,1.81,35,3.19,36,2.519,37,2.278,38,1.602,39,1.602,41,2.597,42,2.597,49,2.127,53,1.145,72,2.651,93,2.512,94,1.826,105,2.127,106,2.127,107,2.584,108,2.127,109,2.519,110,2.815,111,2.815,112,2.584,113,3.025,114,2.584,115,1.826,116,3.674,117,1.273,118,2.127,119,2.127,120,2.584,121,2.584,122,2.584,123,2.584,124,2.127,125,2.127,126,2.584,127,2.127,128,2.584]],["title/injectables/AuthService.html",[61,0.338,93,1.329]],["body/injectables/AuthService.html",[3,0.228,4,0.196,5,0.196,7,0.261,8,0.893,11,0.039,12,0.917,14,1.507,15,1.41,16,0.708,19,0.296,20,0.228,21,0.11,23,1.219,24,1.441,26,0.018,27,0.025,61,0.308,62,0.569,76,1.964,77,3.147,78,2.25,82,1.528,83,1.381,84,1.381,86,1.346,93,1.211,103,1.694,109,2.272,115,1.23,119,1.433,129,1.433,130,2.37,131,1.504,132,1.433,133,1.844,134,4.611,135,1.74,136,1.018,137,2.732,138,1.74,139,2.37,140,2.051,141,3.147,142,2.702,143,2.369,144,3.822,145,2.702,146,2.091,147,2.702,148,2.732,149,2.732,150,2.732,151,1.954,152,1.74,153,2.702,154,2.702,155,1.931,156,1.74,157,2.272,158,2.702,159,1.346,160,1.74,161,1.23,162,1.079,163,2.778,164,2.37,165,1.74,166,1.079,167,1.74,168,2.732,169,1.74,170,1.74,171,1.433,172,1.74,173,1.74,174,1.74,175,1.74]],["title/classes/Constant.html",[21,0.189,53,1.329]],["body/classes/Constant.html",[3,0.378,4,0.326,5,0.326,7,0.434,11,0.04,12,1.09,20,0.378,21,0.182,26,0.026,27,0.026,46,3.966,53,1.762,124,3.273,127,3.273,136,1.211,176,1.793,177,2.381,178,2.81,179,3.211,180,3.211,181,4.543,182,4.543,183,3.458,184,3.74,185,3.976,186,3.976,187,3.976,188,2.892,189,3.976,190,3.976,191,3.976,192,3.976,193,2.892,194,3.976,195,3.976,196,3.976,197,2.892,198,4.543]],["title/classes/CreateUserDto.html",[21,0.189,151,1.329]],["body/classes/CreateUserDto.html",[3,0.504,4,0.434,5,0.434,7,0.578,11,0.037,12,1.151,15,1.615,20,0.504,21,0.243,23,1.889,26,0.031,27,0.031,136,1.279,143,2.316,151,2.127,157,2.575,161,3.694,176,2.389,178,3.392,199,3.173,200,3.854,201,3.854]],["title/injectables/EncryptionUtils.html",[61,0.338,109,1.477]],["body/injectables/EncryptionUtils.html",[3,0.456,4,0.392,5,0.392,7,0.523,8,1.471,11,0.038,12,0.836,14,1.139,15,1.473,16,0.85,19,0.594,20,0.456,21,0.22,24,1.139,26,0.029,27,0.029,53,1.995,61,0.507,62,1.139,76,1.994,82,1.393,83,1.259,84,1.259,103,1.544,109,2.218,136,0.928,141,3.706,143,1.544,159,2.218,166,2.16,179,3.182,183,2.463,202,2.869,203,4.502,204,4.502,205,3.484,206,3.484,207,3.484]],["title/injectables/JwtAuthGuard.html",[61,0.338,208,1.858]],["body/injectables/JwtAuthGuard.html",[3,0.543,4,0.468,5,0.468,11,0.038,16,0.856,19,0.708,20,0.543,21,0.262,26,0.032,27,0.032,61,0.566,62,1.357,117,2.047,208,3.115,209,3.42,210,3.42,211,2.575,212,4.154]],["title/injectables/JwtStrategy.html",[61,0.338,110,1.65]],["body/injectables/JwtStrategy.html",[3,0.391,4,0.337,5,0.337,7,0.448,8,1.329,11,0.039,12,0.975,14,0.977,15,0.883,16,0.884,19,0.509,20,0.391,21,0.189,22,1.473,23,1.08,24,0.977,26,0.026,27,0.026,53,1.325,61,0.458,62,0.977,76,1.848,82,1.626,83,1.47,84,1.47,86,1.473,110,2.239,117,1.473,118,2.461,125,2.461,130,2.521,131,1.646,132,2.461,133,2.141,136,1.322,171,2.461,180,2.113,211,1.853,213,2.461,214,2.989,215,4.067,216,3.348,217,2.989,218,2.989,219,2.461,220,2.989,221,2.461,222,2.113,223,2.989,224,2.461,225,2.461,226,2.989,227,2.989,228,2.989,229,2.461,230,2.989,231,2.989]],["title/injectables/LocalAuthGuard.html",[61,0.338,95,1.858]],["body/injectables/LocalAuthGuard.html",[3,0.543,4,0.468,5,0.468,11,0.038,16,0.856,19,0.708,20,0.543,21,0.262,26,0.032,27,0.032,61,0.566,62,1.357,95,3.115,117,2.047,210,3.42,211,2.575,232,3.42,233,4.154]],["title/injectables/LocalStrategy.html",[61,0.338,111,1.65]],["body/injectables/LocalStrategy.html",[3,0.385,4,0.332,5,0.332,7,0.442,8,1.315,11,0.039,12,0.965,14,0.962,15,1.574,16,0.84,19,0.502,20,0.385,21,0.186,22,1.451,23,1.064,24,0.962,26,0.026,27,0.026,61,0.453,62,0.962,76,1.834,82,1.61,83,1.455,84,1.455,93,2.362,94,2.082,103,1.305,111,2.216,117,1.451,130,2.496,131,1.621,136,1.073,140,1.658,143,2.185,155,2.846,157,1.451,159,1.983,166,1.826,211,1.826,219,2.425,221,2.425,222,2.082,224,2.425,225,2.425,234,2.425,235,2.945,236,2.945,237,2.945,238,4.026,239,2.425,240,2.945,241,2.425,242,2.082]],["title/classes/User.html",[21,0.189,140,1.083]],["body/classes/User.html",[3,0.346,4,0.298,5,0.298,7,0.65,10,2.917,11,0.039,12,1.128,15,1.597,16,0.636,20,0.566,21,0.167,26,0.024,27,0.024,52,1.455,84,1.7,136,1.465,140,1.565,143,1.919,157,2.133,166,1.639,176,1.639,178,2.64,229,3.074,243,1.639,244,3.565,245,4.33,246,5.409,247,4.705,248,2.643,249,4.705,250,5.152,251,3.734,252,2.643,253,2.643,254,2.643,255,2.643,256,4.964,257,3.074,258,2.643,259,3.734,260,1.868,261,1.868,262,2.643,263,2.643,264,1.639,265,2.176]],["title/controllers/UserController.html",[0,1.329,266,1.858]],["body/controllers/UserController.html",[0,0.983,2,0.983,3,0.29,4,0.25,5,0.25,7,0.333,8,1.075,10,2.87,11,0.039,12,1.11,14,1.513,15,1.432,16,0.789,19,0.378,20,0.29,21,0.14,22,1.093,23,0.802,24,1.417,26,0.021,27,0.021,74,1.826,76,2.2,82,1.734,83,1.567,84,1.567,85,2.708,86,1.093,90,2.708,91,1.826,92,1.826,103,0.983,133,1.567,136,1.044,139,2.039,140,1.189,151,2.149,159,2.136,162,1.375,164,1.375,208,1.375,266,2.039,267,1.826,268,2.771,269,3.064,270,2.325,271,3.289,272,1.568,273,2.218,274,2.218,275,1.568,276,2.218,277,2.218,278,3.064,279,2.218,280,2.218,281,1.568,282,2.218,283,2.218,284,2.218,285,2.218,286,2.218,287,2.218,288,1.826,289,1.568,290,1.375,291,2.218,292,2.218,293,4.63,294,2.218,295,2.218,296,2.218,297,2.218,298,2.218,299,2.218,300,2.218,301,2.218,302,2.218,303,2.218,304,2.218,305,2.218]],["title/injectables/UserDao.html",[61,0.338,306,1.477]],["body/injectables/UserDao.html",[3,0.168,4,0.145,5,0.145,7,0.193,8,0.698,11,0.039,12,0.975,14,1.253,15,1.592,16,0.605,19,0.219,20,0.168,21,0.081,23,0.464,24,1.529,26,0.014,27,0.014,52,0.707,61,0.241,62,0.42,76,2.085,82,1.625,83,1.469,84,1.469,86,0.633,103,1.574,131,1.176,136,1.177,139,1.983,140,1.973,142,2.261,143,1.958,145,2.261,146,2.202,147,1.511,151,1.801,153,2.261,154,2.261,157,2.48,158,3.222,159,2.246,162,0.796,163,1.057,164,2.377,216,1.759,241,1.057,242,0.908,244,1.057,260,0.908,261,0.908,268,2.261,269,1.511,270,1.511,272,1.511,275,1.511,278,3.222,281,1.511,289,0.908,290,0.796,306,1.053,307,1.057,308,2.137,309,2.745,310,1.284,311,3.834,312,1.284,313,1.284,314,2.634,315,2.634,316,2.634,317,1.284,318,2.634,319,2.261,320,2.137,321,1.284,322,1.759,323,2.634,324,2.137,325,1.284,326,1.759,327,1.284,328,2.259,329,2.137,330,1.284,331,3.199,332,1.284,333,1.284,334,1.284,335,1.284,336,1.284,337,1.284,338,1.284,339,1.284,340,1.284,341,1.284,342,2.137,343,1.284,344,2.745,345,2.745,346,1.284,347,2.137,348,1.284,349,1.284,350,1.284,351,2.137,352,3.552,353,2.745,354,2.137,355,1.284]],["title/injectables/UserService.html",[61,0.338,133,1.199]],["body/injectables/UserService.html",[3,0.202,4,0.174,5,0.174,7,0.232,8,0.814,11,0.039,12,1.005,14,1.439,15,1.572,16,0.61,19,0.264,20,0.202,21,0.098,22,0.763,23,0.559,24,1.545,26,0.016,27,0.016,61,0.28,62,0.506,76,2.106,82,1.568,83,1.417,84,1.417,86,0.763,103,1.586,130,1.936,131,1.371,133,0.996,136,1.045,139,2.218,140,1.943,142,2.53,143,2.095,145,2.53,146,2.431,147,1.76,151,1.952,153,1.76,154,1.76,155,1.094,157,2.17,158,3.237,159,2.256,162,0.96,164,2.597,268,2.53,269,2.53,270,1.76,272,1.76,275,1.76,278,3.237,281,1.76,289,1.094,290,0.96,306,2.256,314,2.946,315,3.228,316,2.946,318,2.946,319,2.53,322,2.05,323,3.625,326,2.05,328,2.05,356,1.274,357,2.49,358,2.49,359,2.49,360,1.548,361,1.548,362,1.548,363,1.548,364,1.548,365,1.548,366,1.548,367,2.49,368,2.49,369,2.49,370,1.274,371,1.548,372,1.548,373,1.548,374,1.548,375,1.548,376,1.548,377,1.548]],["title/modules/UsersModule.html",[28,1.477,36,1.477]],["body/modules/UsersModule.html",[2,1.816,3,0.395,4,0.34,5,0.34,11,0.039,16,0.915,19,0.515,20,0.395,21,0.191,26,0.027,27,0.027,28,2.019,30,1.489,31,2.019,36,2.791,37,2.54,38,1.874,39,1.874,41,2.897,42,2.137,51,2.489,52,1.664,83,1.093,113,3.374,133,2.329,140,1.093,257,2.489,264,2.54,266,2.882,288,2.489,290,1.874,306,2.646,370,2.489,378,2.489,379,2.489,380,2.489,381,3.023,382,3.023,383,3.023,384,3.023]],["title/coverage.html",[385,2.88]],["body/coverage.html",[0,1.995,1,1.761,5,0.32,6,2.339,11,0.039,17,1.4,21,0.284,26,0.025,27,0.025,53,1.259,61,0.629,63,2.339,69,2.339,72,1.761,73,2.339,93,1.259,95,1.761,109,1.4,110,1.564,111,1.564,129,2.339,133,1.136,136,0.757,140,1.027,151,1.259,161,2.008,177,2.339,199,2.339,202,2.339,208,1.761,209,2.339,213,2.339,232,2.339,234,2.339,242,2.008,243,2.434,264,1.761,266,1.761,267,2.339,306,1.4,307,2.339,319,2.008,356,2.339,385,2.008,386,2.841,387,5.842,388,4.501,389,4.855,390,2.841,391,2.841,392,4.855,393,2.339,394,2.841,395,2.339,396,2.841,397,2.841,398,2.841,399,2.841,400,2.841,401,2.841,402,2.841,403,2.841,404,2.841,405,2.841]],["title/dependencies.html",[31,1.774,406,2.512]],["body/dependencies.html",[11,0.039,19,0.61,26,0.03,27,0.03,31,1.763,45,2.946,46,2.529,52,1.97,115,2.529,117,1.763,179,2.529,180,2.529,222,3.57,239,2.946,260,2.529,407,5.324,408,3.578,409,3.578,410,3.578,411,3.578,412,3.578,413,3.578,414,3.578,415,3.578,416,3.578,417,3.578,418,3.578,419,3.578,420,3.578,421,3.578,422,3.578,423,3.578,424,3.578,425,3.578,426,3.578,427,3.578]],["title/miscellaneous/functions.html",[428,1.238,429,2.965]],["body/miscellaneous/functions.html",[7,0.676,11,0.034,26,0.034,27,0.034,393,3.709,395,4.604,428,2.22,429,3.709,430,4.505]],["title/index.html",[7,0.377,431,2.512,432,2.512]],["body/index.html",[4,0.344,11,0.038,26,0.027,27,0.027,47,2.517,66,2.517,67,2.517,146,1.896,385,2.161,433,3.058,434,3.058,435,4.13,436,3.058,437,3.058,438,3.058,439,3.058,440,3.058,441,3.058,442,4.676,443,3.058,444,3.058,445,3.058,446,3.058,447,5.509,448,3.058,449,3.058,450,3.058,451,5.389,452,3.058,453,3.058,454,4.13,455,3.058,456,3.058,457,3.058,458,3.058,459,4.13,460,4.13,461,3.058,462,3.058,463,3.058,464,4.13,465,4.13,466,3.058,467,3.058,468,3.058,469,3.058,470,3.058,471,2.517,472,3.058,473,3.058,474,3.058,475,3.058,476,3.058,477,3.058,478,3.058,479,3.058,480,3.058,481,3.058,482,3.058,483,3.058,484,3.058,485,3.058,486,3.058]],["title/modules.html",[30,2.008]],["body/modules.html",[11,0.033,26,0.033,27,0.033,29,2.672,30,2.124,35,2.373,36,2.124,471,4.519,487,5.49,488,5.49,489,5.49]],["title/overview.html",[490,3.355]],["body/overview.html",[2,1.335,11,0.038,17,2.286,26,0.026,27,0.026,29,3.461,30,1.484,31,2.014,32,2.48,33,2.48,34,2.48,35,3.243,36,2.789,37,2.534,38,1.867,39,1.867,62,0.984,93,2.432,105,2.48,106,2.48,108,2.48,109,2.286,110,2.554,111,2.554,133,2.194,176,1.867,306,2.286,378,2.48,379,2.48,380,2.48,490,2.48,491,4.64,492,3.012]],["title/miscellaneous/typealiases.html",[428,1.238,493,3.601]],["body/miscellaneous/typealiases.html",[7,0.676,11,0.034,26,0.034,27,0.034,136,1.2,243,2.793,261,3.728,428,2.22,494,4.505,495,3.709]],["title/miscellaneous/variables.html",[428,1.238,496,2.965]],["body/miscellaneous/variables.html",[7,0.665,11,0.036,26,0.034,27,0.034,183,3.132,184,3.648,243,2.747,264,3.237,265,3.648,428,2.183,495,3.648,496,3.648]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":387,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":392,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":388,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":389,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":351,"title":{},"body":{"injectables/UserDao.html":{}}}],["1.0.0",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":346,"title":{},"body":{"injectables/UserDao.html":{}}}],["2.2.2",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["24h",{"_index":192,"title":{},"body":{"classes/Constant.html":{}}}],["2b$10$uqelxfqtoadhqao33dwjbo",{"_index":187,"title":{},"body":{"classes/Constant.html":{}}}],["3",{"_index":491,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":391,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["6.0.15",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":492,"title":{},"body":{"overview.html":{}}}],["9.0.1",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":354,"title":{},"body":{"injectables/UserDao.html":{}}}],["access",{"_index":372,"title":{},"body":{"injectables/UserService.html":{}}}],["access_token",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["aliases",{"_index":494,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["already",{"_index":339,"title":{},"body":{"injectables/UserDao.html":{}}}],["amazing",{"_index":472,"title":{},"body":{"index.html":{}}}],["api",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["app",{"_index":449,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":441,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":17,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":326,"title":{},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["async",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":72,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":210,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":212,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":233,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":480,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":93,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":473,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":179,"title":{},"body":{"classes/Constant.html":{},"injectables/EncryptionUtils.html":{},"dependencies.html":{}}}],["bcrypt.hash(password",{"_index":206,"title":{},"body":{"injectables/EncryptionUtils.html":{}}}],["body",{"_index":287,"title":{},"body":{"controllers/UserController.html":{}}}],["bootstrap",{"_index":395,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":489,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":487,"title":{},"body":{"modules.html":{}}}],["building",{"_index":436,"title":{},"body":{"index.html":{}}}],["business",{"_index":358,"title":{},"body":{"injectables/UserService.html":{}}}],["check",{"_index":68,"title":{},"body":{"injectables/AppService.html":{}}}],["class",{"_index":21,"title":{"classes/Constant.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":176,"title":{},"body":{"classes/Constant.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":378,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":380,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":379,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["conflictexception",{"_index":334,"title":{},"body":{"injectables/UserDao.html":{}}}],["conflictexception('user",{"_index":338,"title":{},"body":{"injectables/UserDao.html":{}}}],["const",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{}}}],["constant",{"_index":53,"title":{"classes/Constant.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Constant.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["constant.bcrypt.salt",{"_index":207,"title":{},"body":{"injectables/EncryptionUtils.html":{}}}],["constant.jwt.expiresin",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["constant.jwt.secret",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":235,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(model",{"_index":310,"title":{},"body":{"injectables/UserDao.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(userdao",{"_index":360,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["contains",{"_index":371,"title":{},"body":{"injectables/UserService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":292,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":385,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":297,"title":{},"body":{"controllers/UserController.html":{}}}],["create(createuserdto",{"_index":272,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["created",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["createdat",{"_index":244,"title":{},"body":{"classes/User.html":{},"injectables/UserDao.html":{}}}],["createuserdto",{"_index":151,"title":{"classes/CreateUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["criteria",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["data",{"_index":315,"title":{},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["date",{"_index":246,"title":{},"body":{"classes/User.html":{}}}],["db",{"_index":316,"title":{},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":183,"title":{},"body":{"classes/Constant.html":{},"injectables/EncryptionUtils.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":268,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":303,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(@param('id",{"_index":304,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(id",{"_index":275,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":347,"title":{},"body":{"injectables/UserDao.html":{}}}],["description",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"index.html":{}}}],["development",{"_index":450,"title":{},"body":{"index.html":{}}}],["document",{"_index":259,"title":{},"body":{"classes/User.html":{}}}],["documentation",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["dto/create",{"_index":289,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":461,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":437,"title":{},"body":{"index.html":{}}}],["encryptionutils",{"_index":109,"title":{"injectables/EncryptionUtils.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"coverage.html":{},"overview.html":{}}}],["exclude",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["exec",{"_index":352,"title":{},"body":{"injectables/UserDao.html":{}}}],["exist",{"_index":340,"title":{},"body":{"injectables/UserDao.html":{}}}],["expiresin",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"classes/Constant.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":211,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":328,"title":{},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":269,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["findall(params",{"_index":320,"title":{},"body":{"injectables/UserDao.html":{}}}],["findonebyid",{"_index":270,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["findonebyid(@param('id",{"_index":301,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebyid(id",{"_index":281,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["findonebyusername",{"_index":308,"title":{},"body":{"injectables/UserDao.html":{}}}],["findonebyusername(username",{"_index":329,"title":{},"body":{"injectables/UserDao.html":{}}}],["findonebyusernameandpassword",{"_index":309,"title":{},"body":{"injectables/UserDao.html":{}}}],["findonebyusernameandpassword(username",{"_index":332,"title":{},"body":{"injectables/UserDao.html":{}}}],["finds",{"_index":331,"title":{},"body":{"injectables/UserDao.html":{}}}],["framework",{"_index":435,"title":{},"body":{"index.html":{}}}],["function",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":429,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":300,"title":{},"body":{"controllers/UserController.html":{}}}],["get('me",{"_index":294,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile",{"_index":271,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(@request",{"_index":295,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(req",{"_index":284,"title":{},"body":{"controllers/UserController.html":{}}}],["getting",{"_index":431,"title":{"index.html":{}},"body":{}}],["getwelcome",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["grow",{"_index":468,"title":{},"body":{"index.html":{}}}],["guard/local.guard",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlebars",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["hash",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{}}}],["here",{"_index":477,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":483,"title":{},"body":{"index.html":{}}}],["id",{"_index":278,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":319,"title":{},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["injectable",{"_index":61,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":335,"title":{},"body":{"injectables/UserDao.html":{}}}],["injectmodel(user.name",{"_index":336,"title":{},"body":{"injectables/UserDao.html":{}}}],["installation",{"_index":446,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":448,"title":{},"body":{"index.html":{}}}],["it's",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["join",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":180,"title":{},"body":{"classes/Constant.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":208,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":110,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":481,"title":{},"body":{"index.html":{}}}],["know",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["license",{"_index":486,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":465,"title":{},"body":{"index.html":{}}}],["limit",{"_index":342,"title":{},"body":{"injectables/UserDao.html":{}}}],["limit(limit",{"_index":349,"title":{},"body":{"injectables/UserDao.html":{}}}],["list",{"_index":322,"title":{},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserDao.html":{}}}],["local",{"_index":239,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":95,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":111,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logic",{"_index":359,"title":{},"body":{"injectables/UserService.html":{}}}],["login",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["match",{"_index":369,"title":{},"body":{"injectables/UserService.html":{}}}],["matched",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":428,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":464,"title":{},"body":{"index.html":{}}}],["mode",{"_index":454,"title":{},"body":{"index.html":{}}}],["model",{"_index":311,"title":{},"body":{"injectables/UserDao.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":181,"title":{},"body":{"classes/Constant.html":{}}}],["mongodb://localhost:27017/simplelogin",{"_index":196,"title":{},"body":{"classes/Constant.html":{}}}],["mongoose",{"_index":260,"title":{},"body":{"classes/User.html":{},"injectables/UserDao.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":383,"title":{},"body":{"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(constant.mongodb.uri",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":476,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":482,"title":{},"body":{"index.html":{}}}],["name",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["nest",{"_index":442,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":485,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"injectables/UserDao.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":242,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/UserDao.html":{},"coverage.html":{}}}],["node.js",{"_index":434,"title":{},"body":{"index.html":{}}}],["npm",{"_index":447,"title":{},"body":{"index.html":{}}}],["number",{"_index":343,"title":{},"body":{"injectables/UserDao.html":{}}}],["object",{"_index":182,"title":{},"body":{"classes/Constant.html":{}}}],["onewayencrypt",{"_index":203,"title":{},"body":{"injectables/EncryptionUtils.html":{}}}],["onewayencrypt(password",{"_index":204,"title":{},"body":{"injectables/EncryptionUtils.html":{}}}],["open",{"_index":466,"title":{},"body":{"index.html":{}}}],["optional",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["others/constant",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":490,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":406,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["params",{"_index":324,"title":{},"body":{"injectables/UserDao.html":{}}}],["passport",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["path",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["please",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["post",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDao.html":{}}}],["process.env.simplelogin_bcrypt_salt",{"_index":186,"title":{},"body":{"classes/Constant.html":{}}}],["process.env.simplelogin_jwt_expiresin",{"_index":191,"title":{},"body":{"classes/Constant.html":{}}}],["process.env.simplelogin_jwt_secret",{"_index":189,"title":{},"body":{"classes/Constant.html":{}}}],["process.env.simplelogin_mongodb_uri",{"_index":195,"title":{},"body":{"classes/Constant.html":{}}}],["production",{"_index":456,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":433,"title":{},"body":{"index.html":{}}}],["project",{"_index":467,"title":{},"body":{"index.html":{}}}],["promise",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":256,"title":{},"body":{"classes/User.html":{}}}],["prop({type",{"_index":247,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":178,"title":{},"body":{"classes/Constant.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["providers",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":198,"title":{},"body":{"classes/Constant.html":{}}}],["read",{"_index":475,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@request",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(req",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(user",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":445,"title":{},"body":{"index.html":{}}}],["represents",{"_index":357,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":296,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["required",{"_index":249,"title":{},"body":{"classes/User.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["rootpath",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":451,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":185,"title":{},"body":{"classes/Constant.html":{}}}],["scalable",{"_index":438,"title":{},"body":{"index.html":{}}}],["schema",{"_index":257,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{}}}],["schema/user.schema",{"_index":290,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":258,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":265,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"classes/Constant.html":{}}}],["secretkey",{"_index":190,"title":{},"body":{"classes/Constant.html":{}}}],["secretorkey",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":251,"title":{},"body":{"classes/User.html":{}}}],["server",{"_index":439,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":440,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":314,"title":{},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["sort",{"_index":350,"title":{},"body":{"injectables/UserDao.html":{}}}],["sortdirection",{"_index":345,"title":{},"body":{"injectables/UserDao.html":{}}}],["sortfieldname",{"_index":344,"title":{},"body":{"injectables/UserDao.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["sponsors",{"_index":470,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":430,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":495,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:21",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/guard/jwt.guard",{"_index":291,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/guard/jwt.guard.ts",{"_index":209,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/local.guard.ts",{"_index":232,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:17",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:8",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/local.stratetgy.ts",{"_index":234,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local.stratetgy.ts:12",{"_index":237,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategy/local.stratetgy.ts:7",{"_index":236,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/main.ts",{"_index":393,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/others/constant",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["src/others/constant.ts",{"_index":177,"title":{},"body":{"classes/Constant.html":{},"coverage.html":{}}}],["src/others/constant.ts:10",{"_index":197,"title":{},"body":{"classes/Constant.html":{}}}],["src/others/constant.ts:2",{"_index":193,"title":{},"body":{"classes/Constant.html":{}}}],["src/others/constant.ts:6",{"_index":188,"title":{},"body":{"classes/Constant.html":{}}}],["src/others/utils/encryption.utils",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/others/utils/encryption.utils.ts",{"_index":202,"title":{},"body":{"injectables/EncryptionUtils.html":{},"coverage.html":{}}}],["src/others/utils/encryption.utils.ts:7",{"_index":205,"title":{},"body":{"injectables/EncryptionUtils.html":{}}}],["src/user/dto/create",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/schema/user.schema.ts",{"_index":243,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/user/schema/user.schema.ts:11",{"_index":252,"title":{},"body":{"classes/User.html":{}}}],["src/user/schema/user.schema.ts:12",{"_index":248,"title":{},"body":{"classes/User.html":{}}}],["src/user/schema/user.schema.ts:13",{"_index":253,"title":{},"body":{"classes/User.html":{}}}],["src/user/schema/user.schema.ts:9",{"_index":255,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":267,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:21",{"_index":286,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:27",{"_index":274,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:33",{"_index":280,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:39",{"_index":283,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:45",{"_index":277,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.dao.ts",{"_index":307,"title":{},"body":{"injectables/UserDao.html":{},"coverage.html":{}}}],["src/user/user.dao.ts:19",{"_index":313,"title":{},"body":{"injectables/UserDao.html":{}}}],["src/user/user.dao.ts:31",{"_index":321,"title":{},"body":{"injectables/UserDao.html":{}}}],["src/user/user.dao.ts:56",{"_index":327,"title":{},"body":{"injectables/UserDao.html":{}}}],["src/user/user.dao.ts:64",{"_index":317,"title":{},"body":{"injectables/UserDao.html":{}}}],["src/user/user.dao.ts:75",{"_index":333,"title":{},"body":{"injectables/UserDao.html":{}}}],["src/user/user.dao.ts:8",{"_index":312,"title":{},"body":{"injectables/UserDao.html":{}}}],["src/user/user.dao.ts:87",{"_index":330,"title":{},"body":{"injectables/UserDao.html":{}}}],["src/user/user.module.ts",{"_index":381,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/user/user.service",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/user/user.service.ts",{"_index":356,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:11",{"_index":361,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":366,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:32",{"_index":362,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":364,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:50",{"_index":365,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:58",{"_index":363,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":452,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":455,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":457,"title":{},"body":{"index.html":{}}}],["started",{"_index":432,"title":{"index.html":{}},"body":{}}],["starter",{"_index":444,"title":{},"body":{"index.html":{}}}],["statements",{"_index":386,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"classes/Constant.html":{},"dependencies.html":{}}}],["stay",{"_index":478,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.stratetgy",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["sub",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["successfull",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":471,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":488,"title":{},"body":{"modules.html":{}}}],["table",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":460,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":463,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":462,"title":{},"body":{"index.html":{}}}],["tests",{"_index":459,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":469,"title":{},"body":{"index.html":{}}}],["there's",{"_index":368,"title":{},"body":{"injectables/UserService.html":{}}}],["this.appservice.getwelcome",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(req.body",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validate(username",{"_index":240,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.encryptionutils.onewayencrypt(password",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.encryptionutils.onewayencrypt(user.password",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findonebyusername(createuserdto.username",{"_index":337,"title":{},"body":{"injectables/UserDao.html":{}}}],["this.jwtservice.sign",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.model",{"_index":348,"title":{},"body":{"injectables/UserDao.html":{}}}],["this.model.create(createuserdto",{"_index":341,"title":{},"body":{"injectables/UserDao.html":{}}}],["this.model.findbyidandremove",{"_index":355,"title":{},"body":{"injectables/UserDao.html":{}}}],["this.model.findone",{"_index":353,"title":{},"body":{"injectables/UserDao.html":{}}}],["this.userdao.create(createuserdto",{"_index":374,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdao.delete(id",{"_index":377,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdao.findall",{"_index":375,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdao.findonebyid(id",{"_index":376,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userdao.findonebyusernameandpassword(username",{"_index":373,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":298,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.create(user",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.delete(id",{"_index":305,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":299,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid(id",{"_index":302,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid(payload.sub",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.validate(username",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":241,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/UserDao.html":{}}}],["timestamps",{"_index":262,"title":{},"body":{"classes/User.html":{}}}],["token",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":479,"title":{},"body":{"index.html":{}}}],["true",{"_index":250,"title":{},"body":{"classes/User.html":{}}}],["twitter",{"_index":484,"title":{},"body":{"index.html":{}}}],["type",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"classes/Constant.html":{},"classes/CreateUserDto.html":{},"injectables/EncryptionUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":493,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":443,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":238,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":254,"title":{},"body":{"classes/User.html":{}}}],["unique",{"_index":263,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":458,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["updatedat",{"_index":245,"title":{},"body":{"classes/User.html":{}}}],["uri",{"_index":194,"title":{},"body":{"classes/Constant.html":{}}}],["use",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["useguards",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":293,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@delete(':id",{"_index":276,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":279,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get(':id",{"_index":282,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get('me",{"_index":285,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@post",{"_index":273,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(localauthguard",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":140,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user's",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":382,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.dao",{"_index":370,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.dto",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":199,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":201,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":200,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":384,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":288,"title":{},"body":{"controllers/UserController.html":{},"modules/UsersModule.html":{}}}],["user.username",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":266,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userdao",{"_index":306,"title":{"injectables/UserDao.html":{}},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userdocument",{"_index":261,"title":{},"body":{"classes/User.html":{},"injectables/UserDao.html":{},"miscellaneous/typealiases.html":{}}}],["username",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["users",{"_index":323,"title":{},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["userschema",{"_index":264,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":133,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":36,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":318,"title":{},"body":{"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["validate",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["validate(payload",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["validates",{"_index":367,"title":{},"body":{"injectables/UserService.html":{}}}],["value",{"_index":184,"title":{},"body":{"classes/Constant.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":496,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":453,"title":{},"body":{"index.html":{}}}],["way",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserDao.html":{},"injectables/UserService.html":{}}}],["website",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["welcome",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":325,"title":{},"body":{"injectables/UserDao.html":{}}}],["you'd",{"_index":474,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getWelcome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getWelcome\n                        \n                    \n                \n            \n            \n                \ngetWelcome()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { AppService } from './app.service';\nimport { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getWelcome(): string {\n    return this.appService.getWelcome();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\n\nimport { join } from 'path';\nimport { UsersModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport Constant from './others/constant';\n@Module({\n  imports: [\n    AuthModule,\n    UsersModule,\n    MongooseModule.forRoot(Constant.MONGODB.URI),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'static'),\n      exclude: ['/api*'],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getWelcome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getWelcome\n                        \n                    \n                \n            \n            \n                \ngetWelcome()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getWelcome(): string {\n    return 'Welcome to my website please check the api documentation to know how to use this';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Request, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './guard/local.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n  @Post('register')\n  async register(@Request() req) {\n    await this.authService.register(req.body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEncryptionUtils\n\nEncryptionUtils\n\nAuthModule -->\n\nEncryptionUtils->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EncryptionUtils\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport Constant from 'src/others/constant';\nimport EncryptionUtils from 'src/others/utils/encryption.utils';\nimport { UsersModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { LocalStrategy } from './strategy/local.stratetgy';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: Constant.JWT.secret,\n      signOptions: { expiresIn: Constant.JWT.expiresIn },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy, EncryptionUtils],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, encryptionUtils: EncryptionUtils)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionUtils\n                                                  \n                                                        \n                                                                        EncryptionUtils\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n                    create a user and hash it's password along the way\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user that will be created\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        returns the token for after successfull login\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:47\n                \n            \n\n\n            \n                \n                    create a user and hash it's password along the way\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user that will be created\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the user that matched the criteria\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n                    validate if username and password has a matching user for it\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's username\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        returns the user that matched the criteria\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserService as UserService } from '../user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport EncryptionUtils from 'src/others/utils/encryption.utils';\nimport { CreateUserDto } from 'src/user/dto/create-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly encryptionUtils: EncryptionUtils,\n  ) {}\n\n  /**\n   * validate if username and password has a matching user for it\n   * @param {string} username user's username\n   * @param {string} password user's password\n   * @return {User} returns the user that matched the criteria\n   **/\n  async validate(username: string, password: string): Promise {\n    password = await this.encryptionUtils.oneWayEncrypt(password);\n    const user = await this.userService.validate(username, password);\n    return user;\n  }\n\n  /**\n   * create a user and hash it's password along the way\n   * @param {CreateUserDto} user the user that will be created\n   * @return {access_token} returns the token for after successfull login\n   **/\n  async login(user: any) {\n    return {\n      access_token: this.jwtService.sign({\n        username: user.username,\n        sub: user.id,\n      }),\n    };\n  }\n\n  /**\n   * create a user and hash it's password along the way\n   * @param {CreateUserDto} user the user that will be created\n   * @return {User} the user that matched the criteria\n   **/\n\n  async register(user: CreateUserDto) {\n    user.password = await this.encryptionUtils.oneWayEncrypt(user.password);\n    return await this.userService.create(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Constant.html":{"url":"classes/Constant.html","title":"class - Constant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Constant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/others/constant.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                BCRYPT\n                            \n                            \n                                    Static\n                                JWT\n                            \n                            \n                                    Static\n                                MONGODB\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        BCRYPT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    salt:\n      process.env.SIMPLELOGIN_BCRYPT_SALT || '$2b$10$UqELXfQTOAdhqAO33dWJBO',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/others/constant.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        JWT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    secret: process.env.SIMPLELOGIN_JWT_SECRET || 'secretKey',\n    expiresIn: process.env.SIMPLELOGIN_JWT_EXPIRESIN || '24h',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/others/constant.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        MONGODB\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    URI:\n      process.env.SIMPLELOGIN_MONGODB_URI ||\n      'mongodb://localhost:27017/simplelogin',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/others/constant.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class Constant {\n  public static JWT = {\n    secret: process.env.SIMPLELOGIN_JWT_SECRET || 'secretKey',\n    expiresIn: process.env.SIMPLELOGIN_JWT_EXPIRESIN || '24h',\n  };\n  public static BCRYPT = {\n    salt:\n      process.env.SIMPLELOGIN_BCRYPT_SALT || '$2b$10$UqELXfQTOAdhqAO33dWJBO',\n  };\n  public static MONGODB = {\n    URI:\n      process.env.SIMPLELOGIN_MONGODB_URI ||\n      'mongodb://localhost:27017/simplelogin',\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  readonly username: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionUtils.html":{"url":"injectables/EncryptionUtils.html","title":"injectable - EncryptionUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/others/utils/encryption.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                oneWayEncrypt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        oneWayEncrypt\n                        \n                    \n                \n            \n            \n                \n                    \n                    oneWayEncrypt(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/others/utils/encryption.utils.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport Constant from '../constant';\n\n@Injectable()\nexport default class EncryptionUtils {\n  async oneWayEncrypt(password: string): Promise {\n    const hash = await bcrypt.hash(password, Constant.BCRYPT.salt);\n    return hash;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport Constant from 'src/others/constant';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: Constant.JWT.secret,\n    });\n  }\n\n  async validate(payload: { sub: string }) {\n    return this.userService.findOneById(payload.sub);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/local.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local.stratetgy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local.stratetgy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/local.stratetgy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validate(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schema/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, index: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schema/user.schema.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\n@Schema({ timestamps: true })\nexport class User {\n  @Prop({ type: String, required: true, index: { unique: true } })\n  username: string;\n  @Prop({ type: String, required: true, select: false })\n  password: string;\n  @Prop({ type: Date }) createdAt?: Date;\n  @Prop({ type: Date }) updatedAt?: Date;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { User } from './schema/user.schema';\nimport { JwtAuthGuard } from 'src/auth/guard/jwt.guard';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n  @UseGuards(JwtAuthGuard)\n  @Get('me')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    await this.userService.create(createUserDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(): Promise {\n    return this.userService.findAll();\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async findOneById(@Param('id') id: string): Promise {\n    return this.userService.findOneById(id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async delete(@Param('id') id: string) {\n    return this.userService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserDao.html":{"url":"injectables/UserDao.html","title":"injectable - UserDao","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserDao\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dao.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                findOneByUsernameAndPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.dao.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.dao.ts:19\n                \n            \n\n\n            \n                \n                    a simple way to create user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user that will be created\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The data of the db\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.dao.ts:64\n                \n            \n\n\n            \n                \n                    delete a user using it's id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(params?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.dao.ts:31\n                \n            \n\n\n            \n                \n                    a simple way to list users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        an array of users\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.dao.ts:56\n                \n            \n\n\n            \n                \n                    find a user using it's id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The data of the db\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.dao.ts:87\n                \n            \n\n\n            \n                \n                    finds the user that has the username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's username\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the user that matched the criteria\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsernameAndPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsernameAndPassword(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.dao.ts:75\n                \n            \n\n\n            \n                \n                    finds the user that has the username and password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's username\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the user that matched the criteria\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { User, UserDocument } from './schema/user.schema';\n\n@Injectable()\nexport class UserDao {\n  constructor(\n    @InjectModel(User.name) private readonly model: Model,\n  ) {}\n\n  /**\n   * a simple way to create user\n   * @param {CreateUserDto} createUserDto the user that will be created\n   * @return {User} The data of the db\n   **/\n\n  async create(createUserDto: CreateUserDto): Promise {\n    if (await this.findOneByUsername(createUserDto.username)) {\n      throw new ConflictException('User already exist');\n    }\n    let user = await this.model.create(createUserDto);\n    return user;\n  }\n\n  /**\n   * a simple way to list users\n   * @return {User[]} an array of users\n   **/\n  async findAll(params?: {\n    limit: number;\n    sortFieldName: string;\n    sortDirection: string;\n  }): Promise {\n    let {\n      limit = 10,\n      sortFieldName = 'createdAt',\n      sortDirection = 'desc',\n    } = params || {};\n\n    return (\n      this.model\n        .find()\n        .limit(limit)\n        .sort({ [sortFieldName]: sortDirection == 'desc' ? -1 : 1 })\n        .exec()\n    );\n  }\n\n  /**\n   * find a user using it's id\n   * @param {string} id user's identifier\n   * @return {User} The data of the db\n   **/\n  async findOneById(id: string): Promise {\n    return this.model.findOne({ _id: id }).exec();\n  }\n\n  /**\n   * delete a user using it's id\n   * @param {string} id user's identifier\n   **/\n  async delete(id: string) {\n    return await this.model.findByIdAndRemove({ _id: id }).exec();\n  }\n\n  /**\n   * finds the user that has the username and password\n   * @param {string} username user's username\n   * @param {string} password user's password\n   * @return {User} the user that matched the criteria\n   **/\n\n  async findOneByUsernameAndPassword(\n    username: string,\n    password: string,\n  ): Promise {\n    return await this.model.findOne({ username, password }).exec();\n  }\n\n  /**\n   * finds the user that has the username\n   * @param {string} username user's username\n   * @return {User} the user that matched the criteria\n   **/\n  async findOneByUsername(username: string): Promise {\n    return await this.model.findOne({ username }).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the business logic for users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userDao: UserDao)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userDao\n                                                  \n                                                        \n                                                                        UserDao\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:32\n                \n            \n\n\n            \n                \n                    a simple way to create user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user that will be created\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The data of the db\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:58\n                \n            \n\n\n            \n                \n                    delete a user using it's id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:40\n                \n            \n\n\n            \n                \n                    a simple way to list users\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        an array of users\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:50\n                \n            \n\n\n            \n                \n                    find a user using it's id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The data of the db\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n                    validates a username and password, if there's a match returns the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's username\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user's password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the user that matched the criteria\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserDao } from './user.dao';\nimport { User } from './schema/user.schema';\n/**\n * Represents the business logic for users.\n * @constructor\n * @param {UserDao} userDao - contains the data access for users\n */\n@Injectable()\nexport class UserService {\n  constructor(private readonly userDao: UserDao) {}\n\n  /**\n   * validates a username and password, if there's a match returns the user\n   * @param {string} username user's username\n   * @param {string} password user's password\n   * @return {User} the user that matched the criteria\n   **/\n  async validate(\n    username: string,\n    password: string,\n  ): Promise {\n    return this.userDao.findOneByUsernameAndPassword(username, password);\n  }\n\n  /**\n   * a simple way to create user\n   * @param {CreateUserDto} createUserDto the user that will be created\n   * @return {User} The data of the db\n   **/\n  async create(createUserDto: CreateUserDto): Promise {\n    return await this.userDao.create(createUserDto);\n  }\n\n  /**\n   * a simple way to list users\n   * @return {User[]} an array of users\n   **/\n  async findAll(): Promise {\n    return await this.userDao.findAll();\n  }\n\n  /**\n   * find a user using it's id\n   * @param {string} id user's identifier\n   * @return {User} The data of the db\n   **/\n\n  async findOneById(id: string): Promise {\n    return await this.userDao.findOneById(id);\n  }\n\n  /**\n   * delete a user using it's id\n   * @param {string} id user's identifier\n   **/\n  async delete(id: string) {\n    return await this.userDao.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserDao\n\nUserDao\n\nUsersModule -->\n\nUserDao->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserDao\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schema/user.schema';\nimport { UserController } from './user.controller';\nimport { UserDao } from './user.dao';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UserController],\n  providers: [UserService, UserDao],\n  exports: [UserService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/local.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/local.stratetgy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/others/constant.ts\n            \n            class\n            Constant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/others/utils/encryption.utils.ts\n            \n            injectable\n            EncryptionUtils\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/schema/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/schema/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.dao.ts\n            \n            injectable\n            UserDao\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                85 %\n                (6/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : 8.0.0\n        \n            @nestjs/mongoose : 9.0.1\n        \n            @nestjs/passport : 8.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/serve-static : ^2.2.2\n        \n            bcrypt : ^5.0.1\n        \n            handlebars : ^4.7.7\n        \n            mongoose : 6.0.15\n        \n            passport : 0.5.0\n        \n            passport-jwt : 4.0.0\n        \n            passport-local : 1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEncryptionUtils\n\nEncryptionUtils\n\nAuthModule -->\n\nEncryptionUtils->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUserDao\n\nUserDao\n\nUsersModule -->\n\nUserDao->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/schema/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/schema/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
