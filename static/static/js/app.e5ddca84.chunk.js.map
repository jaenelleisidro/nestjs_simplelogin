{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","dao/httpclient.tsx","service/SimpleLoginService.tsx","others/singleton.tsx","others/LocalStorage.tsx","screens/LoginScreen.tsx","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","screens/RegistrationScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","HttpClient","request","a","async","this","method","requestJson","url","query","body","headers","requestOptions","includes","JSON","stringify","fetch","then","response","json","SimpleLoginService","apiHost","httpClient","req","host","getJson","postJson","post","patchJson","putJson","deleteJson","get","username","password","postPlain","token","id","user","patch","delete","localStorage","key","value","AsyncStorage","setItem","console","log","Error","getItem","simpleLoginService","LoginScreen","props","state","welcome","users","componentDidMount","getWelcome","setState","message","login","statusCode","access_token","listUser","usersE","i","length","push","View","Text","style","styles","container","width","maxWidth","labelWelcome","label","TextInput","blurOnSubmit","placeholder","textinput","onChangeText","secureTextEntry","Button","color","onPress","onSubmit","title","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","height","borderWidth","borderColor","padding","margin","useThemeColor","colorName","theme","colorFromProps","Colors","lightColor","darkColor","otherProps","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","handleHelpPress","helpLink","helpLinkText","WebBrowser","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","fontSize","lineHeight","textAlign","marginTop","paddingVertical","ModalScreen","separator","StatusBar","Platform","OS","fontWeight","NotFoundScreen","navigation","replace","link","linkText","RegistrationScreen","registrationStatus","register","linking","prefixes","Linking","config","screens","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","Modal","NotFound","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","name","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","initialRouteName","tabBarActiveTintColor","headerRight","Pressable","navigate","opacity","pressed","App","isLoadingComplete","useState","setLoadingComplete","useEffect","SplashScreen","Font","FontAwesome","font","require","warn","useCachedResources","module","exports"],"mappings":"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","file":"static/js/app.e5ddca84.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","export interface RequestInterface{method?:string,url:string,query?:any,body?:any,headers?:{}}\r\n\r\nexport class HttpClient{\r\n\r\n    async get(request:RequestInterface){return await this.request({...request,method:\"GET\"});}\r\n    async getJson(request:RequestInterface){return await this.requestJson({...request,method:\"GET\"});}\r\n    \r\n    async post(request:RequestInterface){return await this.request({...request,method:\"POST\"});}\r\n    async postJson(request:RequestInterface){return await this.requestJson({...request,method:\"POST\"});}\r\n\r\n    async put(request:RequestInterface){return await this.request({...request,method:\"PUT\"});}\r\n    async putJson(request:RequestInterface){return await this.requestJson({...request,method:\"PUT\"});}\r\n\r\n    async patch(request:RequestInterface){return await this.request({...request,method:\"PATCH\"});}\r\n    async patchJson(request:RequestInterface){return await this.requestJson({...request,method:\"PATCH\"});}\r\n\r\n    async delete(request:RequestInterface){return await this.request({...request,method:\"DELETE\"});}\r\n    async deleteJson(request:RequestInterface){return await this.requestJson({...request,method:\"DELETE\"});}\r\n\r\n    async request({method=\"GET\",url,query={},body={},headers={}}:RequestInterface){\r\n        let requestOptions:any = {method,headers: {...headers,'Content-Type': 'application/json' }};\r\n        if([\"GET\"].includes(requestOptions.method)==false){//get can't have body\r\n            requestOptions.body=JSON.stringify(body)\r\n        }\r\n        // console.log(\"requestOptions\",requestOptions,url);\r\n        let response=await fetch(url,requestOptions).then((response) => response.text());\r\n        // console.log(\"response\",response);\r\n        return response;\r\n    }\r\n    async requestJson({method=\"GET\",url,query={},body={},headers={}}:RequestInterface){\r\n        let requestOptions:any = {method,headers: {...headers,'Content-Type': 'application/json' }};\r\n        if([\"GET\"].includes(requestOptions.method)==false){//get can't have body\r\n            requestOptions.body=JSON.stringify(body)\r\n        }\r\n        // console.log(\"requestOptions\",requestOptions,url);\r\n        let response=await fetch(url, requestOptions).then(response =>{\r\n            // console.log(\"response raw\",response)\r\n            return response.json()\r\n        });\r\n        // console.log(\"response\",response);\r\n        return response;        \r\n    }\r\n}","import { HttpClient, RequestInterface } from \"../dao/httpclient\";\r\n\r\nexport default class SimpleLoginService{\r\n    private readonly apiHost:string;\r\n    private readonly httpClient:HttpClient;\r\n    constructor(){\r\n        this.apiHost='http://winddoctor.tplinkdns.com:3000/api';\r\n        this.httpClient=new HttpClient();\r\n    }\r\n\r\n    private async get(req:RequestInterface){\r\n        let {httpClient,apiHost: host}=this;\r\n        req.url=host+req.url;\r\n        return await httpClient.getJson(req)\r\n    }\r\n    private async post(req:RequestInterface){\r\n        let {httpClient,apiHost: host}=this;\r\n        req.url=host+req.url;\r\n        return await httpClient.postJson(req)\r\n    }\r\n    private async postPlain(req:RequestInterface){\r\n        let {httpClient,apiHost: host}=this;\r\n        req.url=host+req.url;\r\n        return await httpClient.post(req)\r\n    }\r\n   private async patch(req:RequestInterface){\r\n        let {httpClient,apiHost: host}=this;\r\n        req.url=host+req.url;\r\n        return await httpClient.patchJson(req)\r\n    }\r\n    private async put(req:RequestInterface){\r\n        let {httpClient,apiHost: host}=this;\r\n        req.url=host+req.url;\r\n        return await httpClient.putJson(req)\r\n    }\r\n    private async delete(req:RequestInterface){\r\n        let {httpClient,apiHost: host}=this;\r\n        req.url=host+req.url;\r\n        return await httpClient.deleteJson(req)\r\n    }\r\n\r\n    async getWelcome(){return await this.httpClient.get({url:this.apiHost});}\r\n    async login(username:string,password:string){return await this.post({url:\"/auth/login\",body:{username,password}});}\r\n    async register(username:string,password:string){return await this.postPlain({url:\"/auth/register\",body:{username,password}});}\r\n\r\n    async listUser(token:string){return await this.get({url:\"/user\",headers:{'Authorization':'Bearer '+token}});}\r\n    async retrieve(id:string){return await this.get({url:\"/user/\"+id});}\r\n    async createUser(user:any){return await this.post({url:\"/user\",body:user});}\r\n    async updateUser(id:string,user:any){return await this.patch({url:\"/user/\"+id,body:user});}\r\n    async deleteUser(id:string,user:any){return await this.delete({url:\"/user/\"+id,body:user});}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","import SimpleLoginService from \"../service/SimpleLoginService\"\r\nimport LocalStorage from \"./LocalStorage\";\r\n\r\nexport let localStorage=new LocalStorage();\r\nexport let simpleLoginService=new SimpleLoginService();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport default class LocalStorage{\r\n    async setItem(key:string,value:string){\r\n        try {\r\n            await AsyncStorage.setItem(key, value);\r\n        } catch (e) {\r\n            console.log(e);\r\n            throw Error('LocalStorage : Error savin item with key:'+key+\" and value:\"+value)\r\n        }        \r\n    }\r\n    async getItem(key:string){\r\n        try {\r\n            const value = await AsyncStorage.getItem(key)\r\n            if(value) {return value}\r\n        } catch (e) {\r\n            console.log(e);\r\n            throw Error('LocalStorage : Error getting item with key:'+key)\r\n        }\r\n        return \"\";\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { StyleSheet, TextInput,Text, View, Button } from 'react-native';\r\n\r\nimport {localStorage, simpleLoginService} from '../others/singleton'\r\nclass LoginScreen extends Component {\r\n   state = {\r\n      welcome:'loading welcome message',\r\n      users:[],\r\n      username:'',\r\n      password:''\r\n   }\r\n\r\n   constructor(props:any){\r\n     super(props);\r\n     \r\n   }\r\n    componentDidMount = async () => {\r\n       try{\r\n         let welcome=await simpleLoginService.getWelcome();\r\n         this.setState({welcome});  \r\n       }catch(e:any){\r\n         this.setState({welcome:e.message});  \r\n       }\r\n   }\r\n\r\n   async onSubmit(){\r\n      try{\r\n         let {username,password}=this.state;\r\n\r\n\r\n         let json=await simpleLoginService.login(username,password);\r\n         this.setState({welcome:'success'+JSON.stringify(json)});\r\n         if(json.statusCode==401){\r\n           this.setState({welcome:'Login Failed'});\r\n         }else{\r\n            localStorage.setItem(\"access_token\",json.access_token)\r\n           this.setState({welcome:'Login Successfull'});\r\n           let users=await simpleLoginService.listUser(json.access_token);\r\n           this.setState({users});  \r\n         }\r\n       }catch(e){\r\n         console.log(e);\r\n         this.setState({welcome:'failed'});\r\n       }\r\n \r\n   }\r\n\r\n   render() {\r\n      let usersE = [];\r\n      let users=this.state.users;\r\n      for (let i = 0; i < users.length; i++) {\r\n         let {username}=users[i];\r\n         usersE.push(<View key={i}><Text> {i+1}) {username}</Text></View>);\r\n      }\r\n      return (\r\n         <View style={styles.container}>\r\n            <View style={{width:'80%',maxWidth:300}}>\r\n            <Text style={styles.labelWelcome}>\r\n               {this.state.welcome}\r\n            </Text>\r\n            {usersE.length == 0 &&\r\n            <View style={{width:'100%'}}>\r\n            <Text style={styles.label}>\r\n            Username\r\n            </Text>\r\n            \r\n            <TextInput\r\n          blurOnSubmit={true}\r\n         //  onSubmitEditing={() => focusNextField()}\r\n          placeholder=\"Username\"\r\n          style={styles.textinput}\r\n          onChangeText={(username) => this.setState({username})} value={this.state.username}\r\n        />\r\n            <Text style={styles.label}>\r\n               Password\r\n            </Text>\r\n         <TextInput\r\n          blurOnSubmit={true}\r\n         //  onSubmitEditing={() => focusNextField()}\r\n          placeholder=\"Password\"\r\n          secureTextEntry\r\n          style={styles.textinput}\r\n          onChangeText={(password) => this.setState({password})} value={this.state.password}\r\n        />\r\n        <Button color=\"#E0245E\" onPress={()=>{this.onSubmit()}} title=\"Login\" />\r\n        </View>\r\n            }\r\n        {usersE.length > 0 &&\r\n        <View>\r\n          <Text>\r\n               List Of Registered Users\r\n            </Text>\r\n            {usersE}\r\n        </View>\r\n      }\r\n         </View>\r\n         </View>\r\n         \r\n      )\r\n   }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   container: {\r\n     flex: 1,\r\n     backgroundColor: '#fff',\r\n     alignItems: 'center',\r\n     justifyContent: 'center',\r\n   },\r\n   textinput: {\r\n      height: 26,\r\n      width:'100%',\r\n      borderWidth: 0.5,\r\n      borderColor: '#0000CC',\r\n      padding: 4,\r\n      margin:4\r\n    },\r\n    labelWelcome: {\r\n      padding: 4,\r\n      margin:4\r\n    },\r\n    label: {\r\n      width:'80%',\r\n      padding: 4,\r\n      margin:4\r\n    },\r\n   \r\n });\r\n\r\n\r\nexport default LoginScreen","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Modal</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import React, { Component } from 'react'\r\nimport { StyleSheet, TextInput,Text, View, Button } from 'react-native';\r\n\r\nimport {localStorage, simpleLoginService} from '../others/singleton'\r\nimport { RootStackScreenProps } from '../types';\r\nclass RegistrationScreen extends Component {\r\n   state = {\r\n    username:'',\r\n    password:'',\r\n    registrationStatus:''\r\n }\r\n\r\n   constructor(props:RootStackScreenProps<'NotFound'>){\r\n     super(props);\r\n     \r\n   }\r\n    componentDidMount = async () => {}\r\n\r\n   async onSubmit(){\r\n    try{\r\n        let {username,password}=this.state;\r\n        await simpleLoginService.register(username,password)\r\n        this.setState({username:'',password:'',registrationStatus:'Registration Successfull!!'});\r\n        \r\n    }catch(e:any){\r\n        this.setState({registrationStatus:'Registration Failed'+e.message});\r\n        console.log(e)\r\n    }\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <View style={styles.container}>\r\n            <View style={{width:'80%',maxWidth:300}}>\r\n            <Text style={styles.label}>\r\n            {this.state.registrationStatus}\r\n            </Text>\r\n\r\n            <Text style={styles.label}>\r\n            Username\r\n            </Text>\r\n            <TextInput\r\n          blurOnSubmit={true}\r\n          placeholder=\"Username\"\r\n          style={styles.textinput}\r\n          onChangeText={(username) => this.setState({username})} value={this.state.username}\r\n        />\r\n            <Text style={styles.label}>\r\n               Password\r\n            </Text>\r\n         <TextInput\r\n          blurOnSubmit={true}\r\n          placeholder=\"Password\"\r\n          secureTextEntry\r\n          style={styles.textinput}\r\n          onChangeText={(password) => this.setState({password})} value={this.state.password}\r\n\r\n        />\r\n        <Button color=\"#E0245E\" onPress={()=>this.onSubmit()} title=\"Register\" />\r\n         </View>\r\n         </View>\r\n      )\r\n   }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   container: {\r\n     flex: 1,\r\n     backgroundColor: '#fff',\r\n     alignItems: 'center',\r\n     justifyContent: 'center',\r\n   },\r\n   textinput: {\r\n      height: 26,\r\n      width:'100%',\r\n      borderWidth: 0.5,\r\n      borderColor: '#0000CC',\r\n      padding: 4,\r\n      margin:4\r\n    },\r\n    label: {\r\n      width:'100%',\r\n      padding: 4,\r\n      margin:4\r\n    },\r\n   \r\n });\r\n\r\n\r\nexport default RegistrationScreen","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\r\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\r\n * https://reactnavigation.org/docs/getting-started\r\n *\r\n */\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport * as React from 'react';\r\nimport { ColorSchemeName, Pressable } from 'react-native';\r\n\r\nimport Colors from '../constants/Colors';\r\nimport useColorScheme from '../hooks/useColorScheme';\r\nimport LoginScreen from '../screens/LoginScreen';\r\nimport ModalScreen from '../screens/ModalScreen';\r\nimport NotFoundScreen from '../screens/NotFoundScreen';\r\nimport RegistrationScreen from '../screens/RegistrationScreen';\r\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\r\nimport LinkingConfiguration from './LinkingConfiguration';\r\n\r\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\r\n  return (\r\n    <NavigationContainer\r\n      linking={LinkingConfiguration}>\r\n      <RootNavigator />\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\n/**\r\n * A root stack navigator is often used for displaying modals on top of all other content.\r\n * https://reactnavigation.org/docs/modal\r\n */\r\nconst Stack = createNativeStackNavigator<RootStackParamList>();\r\n\r\nfunction RootNavigator() {\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} options={{ headerShown: false }} />\r\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\r\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\r\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\r\n      </Stack.Group>\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n\r\n/**\r\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\r\n * https://reactnavigation.org/docs/bottom-tab-navigator\r\n */\r\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\r\n\r\nfunction BottomTabNavigator() {\r\n  const colorScheme = useColorScheme();\r\n\r\n  return (\r\n    <BottomTab.Navigator\r\n      initialRouteName=\"TabOne\"\r\n      screenOptions={{\r\n        tabBarActiveTintColor: Colors[colorScheme].tint,\r\n      }}>\r\n      <BottomTab.Screen\r\n        name=\"TabTwo\"\r\n        component={RegistrationScreen}\r\n        options={{\r\n          title: 'Registration',\r\n        }}\r\n      />\r\n      <BottomTab.Screen\r\n        name=\"TabOne\"\r\n        component={LoginScreen}\r\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\r\n          title: 'Login',\r\n          headerRight: () => (\r\n            <Pressable\r\n              onPress={() => navigation.navigate('Modal')}\r\n              style={({ pressed }) => ({\r\n                opacity: pressed ? 0.5 : 1,\r\n              })}>\r\n            </Pressable>\r\n          ),\r\n        })}\r\n      />\r\n\r\n    </BottomTab.Navigator>\r\n  );\r\n}\r\n","import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}